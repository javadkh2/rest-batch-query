[{"/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/index.js":"1","/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/reportWebVitals.js":"2","/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/App.js":"3","/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/Profile/index.js":"4","/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/request/index.js":"5","/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/Profile/Blog/index.js":"6","/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/Profile/Blog/Article/index.js":"7"},{"size":778,"mtime":1612259628438,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610543115987,"results":"10","hashOfConfig":"9"},{"size":282,"mtime":1612189578839,"results":"11","hashOfConfig":"9"},{"size":643,"mtime":1612274715235,"results":"12","hashOfConfig":"9"},{"size":2670,"mtime":1612189345349,"results":"13","hashOfConfig":"9"},{"size":740,"mtime":1612274726601,"results":"14","hashOfConfig":"9"},{"size":456,"mtime":1612196040005,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"120crlb",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/index.js",[],["32","33"],"/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/reportWebVitals.js",[],"/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/App.js",[],"/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/Profile/index.js",[],"/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/request/index.js",["34"],"// send batch query\nexport function fetchResults(data) {\n  return fetch(\"/query\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  }).then((response) => response.json());\n}\n\n// run each request separately\nfunction fetchResultsSeparately(data) {\n  return Promise.all(\n    data.map(({ path }) =>\n      fetch(path)\n        .then((r) => r.json())\n        .then((result) => setResult({ [path]: { result } }))\n    )\n  ).then(() => ({}));\n}\n\nlet result = {};\n\nconst setResult = (update) => {\n  result = { ...result, ...update };\n  console.log(\"RESULT\", result);\n  return result;\n};\n\nfunction fetchQuery(query) {\n  return fetchResults(query)\n    .then(setResult)\n    .catch((err) => {\n      // TODO: update it based on server response\n      const error =\n        err instanceof Error ? err : new Error(err || \"Unknown Error\");\n\n      setResult({\n        [query.path]: error,\n      });\n\n      return Promise.reject(error);\n    });\n}\n\n// TODO: how to handel same call from different components with different children?\n// TODO: how to refetch in case of error?\n// TODO: Race condition\n// export function requestOne(query, refetch = false) {\n//   result[query.path] =\n//     !result[query.path] || refetch ? fetchQuery(query) : result[query.path];\n\n//   const res = result[query.path];\n\n//   if (res instanceof Promise || res instanceof Error) {\n//     throw res;\n//   }\n\n//   return res.result;\n// }\n\nexport function requestOne(query, refetch = false) {\n  result[query.path] = !result[query.path]\n    ? fetchResultsSeparately([query])\n    : result[query.path];\n\n  const res = result[query.path];\n\n  if (res instanceof Promise || res instanceof Error) {\n    throw res;\n  }\n\n  return res.result;\n}\n\nexport default function request(queries, refetch = false) {\n  return queries.map((q) => requestOne(q));\n}\n\n\n// export default function request(queries, refetch = false) {\n//   const newQueries = refetch\n//     ? queries\n//     : queries.filter(({ path }) => !result[path]);\n\n//   if (newQueries.length === 0) {\n//     queries.forEach(({ path }) => {\n//       if (result[path] instanceof Error) {\n//         throw Error;\n//       }\n//     });\n\n//     const pendingRequests = queries\n//       .filter(({ path }) => result[path] instanceof Promise)\n//       .map(({ path }) => result[path]);\n\n//     if (pendingRequests.length > 0) {\n//       throw Promise.all(pendingRequests);\n//     }\n\n//     return queries.map((query) => result[query.path].result);\n//   }\n//   const promise = fetchQuery(newQueries);\n//   newQueries.forEach((query) => {\n//     result[query.path] = promise;\n//   });\n\n//   throw promise;\n// }\n","/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/Profile/Blog/index.js",[],"/Users/javad.khalilian/Projects/hack-time/batch-query/client/src/Profile/Blog/Article/index.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":31,"column":10,"nodeType":"41","messageId":"42","endLine":31,"endColumn":20},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'fetchQuery' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]